import 'dart:convert';
import 'dart:typed_data';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:excel/excel.dart';
import 'package:http/http.dart' as http;
import '../models/customer.dart';

class CustomerService {
  static final CustomerService _instance = CustomerService._internal();
  factory CustomerService() => _instance;
  CustomerService._internal();

  final FirebaseStorage _storage = FirebaseStorage.instance;
  
  // Enhanced Smart Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ + File Version Tracking
  static Map<String, Customer>? _customerMap;
  static Map<String, String>? _customerNamesMap; // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠ (‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤)
  static Set<String>? _availableCustomerIds; // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ID ‡∏ó‡∏µ‡πà‡∏°‡∏µ (ultra light)
  static String? _lastFileVersion; // Track version ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå Excel
  static String? _currentFileVersion; // Version ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
  static DateTime? _lastLoadTime;
  static DateTime? _lastNamesLoadTime;
  static DateTime? _lastIdsLoadTime;
  static DateTime? _lastVersionCheck;
  static const Duration _cacheValidDuration = Duration(hours: 6);
  static const Duration _namesCacheValidDuration = Duration(hours: 12); // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤
  static const Duration _idsCacheValidDuration = Duration(hours: 24); // ID ‡πÄ‡∏Å‡πá‡∏ö‡∏ô‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  static const Duration _versionCheckInterval = Duration(minutes: 5); // ‡πÄ‡∏ä‡πá‡∏Ñ version ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  static bool _isLoading = false;
  static bool _isLoadingNames = false;
  static bool _isLoadingIds = false;
  static bool _isCheckingVersion = false;

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö version ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå Excel (‡πÉ‡∏ä‡πâ metadata) üîç
  Future<String> _getFileVersion() async {
    try {
      final ref = _storage.ref().child('Customer.xlsx');
      final metadata = await ref.getMetadata();
      
      // ‡πÉ‡∏ä‡πâ combination ‡∏Ç‡∏≠‡∏á updated time + size ‡πÄ‡∏õ‡πá‡∏ô version identifier
      final updated = metadata.updated?.millisecondsSinceEpoch ?? 0;
      final size = metadata.size ?? 0;
      final version = '$updated-$size';
      
      print('üìä Current file version: $version');
      return version;
    } catch (e) {
      print('‚ö†Ô∏è Failed to get file version: $e');
      return DateTime.now().millisecondsSinceEpoch.toString();
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà üîÑ
  Future<bool> _checkFileUpdated() async {
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏ä‡πá‡∏Ñ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    if (_lastVersionCheck == null || 
        DateTime.now().difference(_lastVersionCheck!) > _versionCheckInterval) {
      
      if (_isCheckingVersion) {
        print('‚è≥ Already checking file version...');
        return false;
      }
      
      _isCheckingVersion = true;
      
      try {
        print('üîç Checking if Excel file has been updated...');
        _currentFileVersion = await _getFileVersion();
        _lastVersionCheck = DateTime.now();
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ version ‡πÄ‡∏Å‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ version ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        if (_lastFileVersion == null || _lastFileVersion != _currentFileVersion) {
          print('üÜï File has been updated! Old: $_lastFileVersion, New: $_currentFileVersion');
          _lastFileVersion = _currentFileVersion;
          return true;
        } else {
          print('‚úÖ File version unchanged: $_currentFileVersion');
          return false;
        }
      } finally {
        _isCheckingVersion = false;
      }
    }
    
    return false; // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ version ‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
  }

  /// ‡∏•‡πâ‡∏≤‡∏á cache ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° remote cache)
  void _clearAllCaches() {
    _customerMap = null;
    _customerNamesMap = null;
    _availableCustomerIds = null;
    _lastLoadTime = null;
    _lastNamesLoadTime = null;
    _lastIdsLoadTime = null;
    print('üßπ Internal caches cleared due to file update');
  }

  /// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (Single Load + Smart Update) üß†
  /// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (Single Load + Smart Update) üß†
  Future<void> _loadCustomerIdsIfNeeded() async {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    final fileUpdated = await _checkFileUpdated();
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (fileUpdated) {
      print('üîÑ File updated - clearing all caches...');
      _clearAllCaches();
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IDs cache
    if (_availableCustomerIds != null && 
        _lastIdsLoadTime != null && 
        DateTime.now().difference(_lastIdsLoadTime!) < _idsCacheValidDuration && 
        !fileUpdated) {
      print('üîë Using cached customer IDs: ${_availableCustomerIds!.length} IDs');
      return;
    }

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≠‡∏ô
    if (_isLoadingIds) {
      print('‚è≥ Already loading customer IDs, waiting...');
      while (_isLoadingIds) {
        await Future.delayed(const Duration(milliseconds: 50));
      }
      return;
    }

    _isLoadingIds = true;
    print('üîÑ Loading customer IDs (single load strategy)...');
    
    try {
      // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ JSON cache ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó)
      if (!fileUpdated && await _loadIdsFromJsonCache()) {
        _lastIdsLoadTime = DateTime.now();
        print('‚ö° Loaded ${_availableCustomerIds!.length} customer IDs from JSON cache');
        return;
      }

      // ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Excel ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á cache ‡πÉ‡∏´‡∏°‡πà
      await _loadIdsFromExcel();
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô JSON cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      await _saveIdsToJsonCache();
      
      _lastIdsLoadTime = DateTime.now();
      print('‚úÖ Single load completed: ${_availableCustomerIds!.length} customer IDs');
      
    } catch (e) {
      print('‚ùå Error in single load IDs: $e');
      _availableCustomerIds = <String>{};
    } finally {
      _isLoadingIds = false;
    }
  }

  /// ‡πÇ‡∏´‡∏•‡∏î IDs ‡∏à‡∏≤‡∏Å JSON Cache (ultra fast)
  Future<bool> _loadIdsFromJsonCache() async {
    try {
      final ref = _storage.ref().child('cache/customer_ids.json');
      final downloadUrl = await ref.getDownloadURL();
      
      final response = await http.get(Uri.parse(downloadUrl));
      if (response.statusCode == 200) {
        final jsonData = json.decode(response.body) as List<dynamic>;
        _availableCustomerIds = Set<String>.from(jsonData);
        print('üì¶ IDs JSON cache loaded: ${_availableCustomerIds!.length} IDs');
        return true;
      }
    } catch (e) {
      print('‚ö†Ô∏è IDs JSON cache not found: $e');
    }
    return false;
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å IDs ‡πÄ‡∏õ‡πá‡∏ô JSON Cache
  Future<void> _saveIdsToJsonCache() async {
    if (_availableCustomerIds == null || _availableCustomerIds!.isEmpty) return;
    
    try {
      final jsonData = json.encode(_availableCustomerIds!.toList());
      final bytes = utf8.encode(jsonData);
      
      final ref = _storage.ref().child('cache/customer_ids.json');
      await ref.putData(
        bytes,
        SettableMetadata(contentType: 'application/json'),
      );
      
      print('üíæ Customer IDs saved to JSON cache');
    } catch (e) {
      print('‚ö†Ô∏è Failed to save IDs JSON cache: $e');
    }
  }

  /// ‡πÇ‡∏´‡∏•‡∏î IDs ‡∏à‡∏≤‡∏Å Excel ‡πÅ‡∏ö‡∏ö ultra selective (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å)
  Future<void> _loadIdsFromExcel() async {
    final ref = _storage.ref().child('Customer.xlsx');
    final downloadUrl = await ref.getDownloadURL();
    
    final response = await http.get(Uri.parse(downloadUrl));
    if (response.statusCode != 200) {
      throw Exception('Failed to download Excel file: ${response.statusCode}');
    }

    final bytes = response.bodyBytes;
    final excel = Excel.decodeBytes(bytes);
    
    _availableCustomerIds = <String>{};
    
    final sheet = excel.tables[excel.tables.keys.first];
    if (sheet == null) {
      throw Exception('No sheet found in Excel file');
    }

    // ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å (ID only) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    for (int rowIndex = 0; rowIndex < sheet.maxRows; rowIndex++) {
      final row = sheet.rows[rowIndex];
      
      if (row.isNotEmpty && row[0]?.value != null) {
        final customerId = row[0]?.value?.toString().trim() ?? '';
        
        if (customerId.isNotEmpty) {
          _availableCustomerIds!.add(customerId);
        }
      }
    }
  }

  /// ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Customer Names ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI (Single Load + Smart Update) ‚ö°
  Future<void> _loadCustomerNamesIfNeeded() async {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    final fileUpdated = await _checkFileUpdated();
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (fileUpdated) {
      print('üîÑ File updated - clearing names cache...');
      _clearAllCaches();
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö names cache
    if (_customerNamesMap != null && 
        _lastNamesLoadTime != null && 
        DateTime.now().difference(_lastNamesLoadTime!) < _namesCacheValidDuration && 
        !fileUpdated) {
      print('üè∑Ô∏è Using cached customer names: ${_customerNamesMap!.length} names');
      return;
    }

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≠‡∏ô
    if (_isLoadingNames) {
      print('‚è≥ Already loading customer names, waiting...');
      while (_isLoadingNames) {
        await Future.delayed(const Duration(milliseconds: 100));
      }
      return;
    }

    _isLoadingNames = true;
    print('üîÑ Single load: customer names from Firebase Storage...');
    
    try {
      // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ JSON cache ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (await _loadNamesFromJsonCache()) {
        _lastNamesLoadTime = DateTime.now();
        print('‚ö° Loaded ${_customerNamesMap!.length} customer names from JSON cache');
        return;
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ JSON cache ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Excel ‡πÅ‡∏ö‡∏ö selective
      await _loadNamesFromExcel();
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô JSON cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      await _saveNamesToJsonCache();
      
      _lastNamesLoadTime = DateTime.now();
      print('‚úÖ Loaded ${_customerNamesMap!.length} customer names from Excel and cached');
      
    } catch (e) {
      print('‚ùå Error loading customer names: $e');
      _customerNamesMap = <String, String>{};
    } finally {
      _isLoadingNames = false;
    }
  }

  /// ‡πÇ‡∏´‡∏•‡∏î Names ‡∏à‡∏≤‡∏Å JSON Cache (‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß)
  Future<bool> _loadNamesFromJsonCache() async {
    try {
      final ref = _storage.ref().child('cache/customer_names.json');
      final downloadUrl = await ref.getDownloadURL();
      
      final response = await http.get(Uri.parse(downloadUrl));
      if (response.statusCode == 200) {
        final jsonData = json.decode(response.body) as Map<String, dynamic>;
        _customerNamesMap = Map<String, String>.from(jsonData);
        print('üì¶ JSON cache loaded: ${_customerNamesMap!.length} names');
        return true;
      }
    } catch (e) {
      print('‚ö†Ô∏è JSON cache not found or invalid: $e');
    }
    return false;
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Names ‡πÄ‡∏õ‡πá‡∏ô JSON Cache
  Future<void> _saveNamesToJsonCache() async {
    if (_customerNamesMap == null || _customerNamesMap!.isEmpty) return;
    
    try {
      final jsonData = json.encode(_customerNamesMap);
      final bytes = utf8.encode(jsonData);
      
      final ref = _storage.ref().child('cache/customer_names.json');
      await ref.putData(
        bytes,
        SettableMetadata(contentType: 'application/json'),
      );
      
      print('üíæ Customer names saved to JSON cache');
    } catch (e) {
      print('‚ö†Ô∏è Failed to save JSON cache: $e');
    }
  }

  /// ‡πÇ‡∏´‡∏•‡∏î Names ‡∏à‡∏≤‡∏Å Excel ‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  Future<void> _loadNamesFromExcel() async {
    final ref = _storage.ref().child('Customer.xlsx');
    final downloadUrl = await ref.getDownloadURL();
    
    final response = await http.get(Uri.parse(downloadUrl));
    if (response.statusCode != 200) {
      throw Exception('Failed to download Excel file: ${response.statusCode}');
    }

    final bytes = response.bodyBytes;
    final excel = Excel.decodeBytes(bytes);
    
    _customerNamesMap = <String, String>{};
    
    final sheet = excel.tables[excel.tables.keys.first];
    if (sheet == null) {
      throw Exception('No sheet found in Excel file');
    }

    // ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å (ID + Name) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    for (int rowIndex = 0; rowIndex < sheet.maxRows; rowIndex++) {
      final row = sheet.rows[rowIndex];
      
      if (row.isNotEmpty && row[0]?.value != null) {
        final customerId = row[0]?.value?.toString().trim() ?? '';
        final customerName = row.length > 1 ? (row[1]?.value?.toString().trim() ?? '') : '';
        
        if (customerId.isNotEmpty && customerName.isNotEmpty) {
          _customerNamesMap![customerId] = customerName;
        }
      }
    }
  }

  /// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Excel ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Map (Single Load + Smart Update)
  Future<void> _loadCustomerMapIfNeeded() async {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    final fileUpdated = await _checkFileUpdated();
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (fileUpdated) {
      print('üîÑ File updated - clearing full data cache...');
      _clearAllCaches();
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache
    if (_customerMap != null && 
        _lastLoadTime != null && 
        DateTime.now().difference(_lastLoadTime!) < _cacheValidDuration && 
        !fileUpdated) {
      print('üì¶ Using cached customer map: ${_customerMap!.length} customers');
      return;
    }

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≠‡∏ô
    if (_isLoading) {
      print('‚è≥ Already loading customer data, waiting...');
      while (_isLoading) {
        await Future.delayed(const Duration(milliseconds: 100));
      }
      return;
    }

    _isLoading = true;
    print('üîÑ Loading customer data from Firebase Storage...');
    
    try {
      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏à‡∏≤‡∏Å Firebase Storage
      final ref = _storage.ref().child('Customer.xlsx');
      final downloadUrl = await ref.getDownloadURL();
      print('üì• Download URL obtained');
      
      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
      final response = await http.get(Uri.parse(downloadUrl));
      if (response.statusCode != 200) {
        throw Exception('Failed to download Excel file: ${response.statusCode}');
      }
      print('‚úÖ Excel file downloaded successfully, size: ${response.bodyBytes.length} bytes');

      // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Map
      final bytes = response.bodyBytes;
      final excel = Excel.decodeBytes(bytes);
      print('üìä Excel file decoded, sheets: ${excel.tables.keys.toList()}');
      
      _customerMap = <String, Customer>{};
      
      // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sheet ‡πÅ‡∏£‡∏Å
      final sheet = excel.tables[excel.tables.keys.first];
      if (sheet == null) {
        throw Exception('No sheet found in Excel file');
      }
      
      print('üìñ Reading from sheet: ${excel.tables.keys.first}, rows: ${sheet.maxRows}');

      // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å row ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Map
      for (int rowIndex = 0; rowIndex < sheet.maxRows; rowIndex++) {
        final row = sheet.rows[rowIndex];
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô cell ‡πÅ‡∏£‡∏Å (Customer ID)
        if (row.isNotEmpty && row[0]?.value != null) {
          final customerId = row[0]?.value?.toString().trim() ?? '';
          final customerName = row.length > 1 ? (row[1]?.value?.toString().trim() ?? '') : '';
          final address = row.length > 2 ? row[2]?.value?.toString().trim() : null;
          final phoneNumber = row.length > 3 ? row[3]?.value?.toString().trim() : null;
          final email = row.length > 4 ? row[4]?.value?.toString().trim() : null;
          
          if (customerId.isNotEmpty && customerName.isNotEmpty) {
            _customerMap![customerId] = Customer(
              customerId: customerId,
              customerName: customerName,
              address: address,
              phoneNumber: phoneNumber,
              email: email,
            );
          }
        }
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï cache timestamp
      _lastLoadTime = DateTime.now();
      
      print('‚úÖ Loaded ${_customerMap!.length} customers into memory map');
      
    } catch (e) {
      print('‚ùå Error loading customers from Excel: $e');
      _customerMap = <String, Customer>{};
    } finally {
      _isLoading = false;
    }
  }

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö - ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô app start üöÄ
  static Future<void> initialize() async {
    print('üöÄ Initializing CustomerService with single load strategy...');
    final instance = CustomerService();
    
    try {
      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      await instance._loadCustomerNamesIfNeeded();
      print('‚úÖ CustomerService initialized successfully');
    } catch (e) {
      print('‚ùå CustomerService initialization failed: $e');
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä cache ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô üîÑ
  Future<bool> refreshIfNeeded() async {
    print('üîç Checking if refresh is needed...');
    
    final fileUpdated = await _checkFileUpdated();
    if (fileUpdated) {
      print('üîÑ File updated - performing smart refresh...');
      _clearAllCaches();
      
      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö progressive
      await _loadCustomerNamesIfNeeded();
      print('‚úÖ Smart refresh completed');
      return true;
    }
    
    print('‚úÖ No refresh needed - data is up to date');
    return false;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Customer ID ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (ultra fast validation) ‚ö°‚ö°‚ö°
  Future<bool> isCustomerIdExists(String customerId) async {
    if (customerId.trim().isEmpty) return false;
    
    // Level 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å IDs cache ‡∏Å‡πà‡∏≠‡∏ô (ultra light)
    await _loadCustomerIdsIfNeeded();
    if (_availableCustomerIds?.contains(customerId) == true) {
      print('‚ö° Customer ID $customerId validated from IDs cache');
      return true;
    }
    
    // Level 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Names cache (light)
    if (_customerNamesMap?.containsKey(customerId) == true) {
      print('‚ö° Customer ID $customerId validated from names cache');
      return true;
    }
    
    // Level 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Full cache (heavy)
    if (_customerMap?.containsKey(customerId) == true) {
      print('‚ö° Customer ID $customerId validated from full cache');
      return true;
    }
    
    print('‚ùå Customer ID $customerId not found');
    return false;
  }

  /// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Customer IDs ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö autocomplete)
  Future<Set<String>> getAvailableCustomerIds() async {
    await _loadCustomerIdsIfNeeded();
    return _availableCustomerIds ?? <String>{};
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (O(1) lookup)
  Future<Customer?> getCustomerById(String customerId) async {
    await _loadCustomerMapIfNeeded();
    
    final customer = _customerMap?[customerId];
    if (customer != null) {
      print('üë§ Found customer: ${customer.customerName} (${customer.customerId})');
    } else {
      print('‚ùå Customer $customerId not found in map');
    }
    
    return customer;
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Reports)
  Future<Map<String, Customer>> getCustomersByIds(List<String> customerIds) async {
    await _loadCustomerMapIfNeeded();
    
    final result = <String, Customer>{};
    final foundIds = <String>[];
    final notFoundIds = <String>[];
    
    for (final id in customerIds) {
      final customer = _customerMap?[id];
      if (customer != null) {
        result[id] = customer;
        foundIds.add(id);
      } else {
        notFoundIds.add(id);
      }
    }
    
    print('‚úÖ Found ${foundIds.length} customers: ${foundIds.take(5).join(", ")}${foundIds.length > 5 ? "..." : ""}');
    if (notFoundIds.isNotEmpty) {
      print('‚ùå Not found ${notFoundIds.length} customers: ${notFoundIds.take(3).join(", ")}${notFoundIds.length > 3 ? "..." : ""}');
    }
    
    return result;
  }

  /// ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI) ‚ö° PROGRESSIVE ENHANCED
  Future<Map<String, String>> getCustomerNamesByIds(List<String> customerIds) async {
    if (customerIds.isEmpty) return {};
    
    print('üîÑ Loading customer names for ${customerIds.length} unique customers...');
    
    final result = <String, String>{};
    final remainingIds = <String>[];
    
    // Level 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Names Cache ‡∏Å‡πà‡∏≠‡∏ô (fastest)
    await _loadCustomerNamesIfNeeded();
    
    for (final id in customerIds) {
      final name = _customerNamesMap?[id];
      if (name != null) {
        result[id] = name;
      } else {
        remainingIds.add(id);
      }
    }
    
    print('‚ö° Level 1: Found ${result.length}/${customerIds.length} from names cache');
    
    // Level 2: ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Full Cache
    if (remainingIds.isNotEmpty) {
      await _loadCustomerMapIfNeeded();
      
      final stillMissingIds = <String>[];
      
      for (final id in remainingIds) {
        final customer = _customerMap?[id];
        if (customer != null) {
          result[id] = customer.customerName;
        } else {
          stillMissingIds.add(id);
        }
      }
      
      print('‚ö° Level 2: Found ${remainingIds.length - stillMissingIds.length}/${remainingIds.length} from full cache');
      
      // Level 3: ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Customer ID ‡πÄ‡∏õ‡πá‡∏ô fallback
      for (final id in stillMissingIds) {
        result[id] = id; // ‡πÅ‡∏™‡∏î‡∏á ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
      }
      
      if (stillMissingIds.isNotEmpty) {
        print('‚ö†Ô∏è Level 3: ${stillMissingIds.length} customers using ID as fallback');
      }
    }
    
    print('‚úÖ Progressive lookup completed: ${result.length} customer names');
    return result;
  }

  /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ (Progressive Search) üîç
  Future<List<Customer>> searchCustomers(String query) async {
    if (query.trim().isEmpty) return [];
    
    final queryLower = query.toLowerCase();
    
    // Level 1: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô Names Cache ‡∏Å‡πà‡∏≠‡∏ô (‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß)
    await _loadCustomerNamesIfNeeded();
    final matchingIds = <String>[];
    
    _customerNamesMap?.forEach((id, name) {
      if (name.toLowerCase().contains(queryLower) || 
          id.toLowerCase().contains(queryLower)) {
        matchingIds.add(id);
      }
    });
    
    if (matchingIds.isEmpty) {
      print('üîç No matches found in names cache for "$query"');
      return [];
    }
    
    print('üîç Found ${matchingIds.length} potential matches in names cache');
    
    // Level 2: ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏ö
    final customers = await getCustomersByIds(matchingIds);
    final results = customers.values.toList();
    
    print('üîç Progressive search "$query" found ${results.length} customers');
    return results;
  }

  /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö Auto-complete (ultra fast)
  Future<List<String>> searchCustomerNames(String query, {int limit = 10}) async {
    if (query.trim().isEmpty) return [];
    
    await _loadCustomerNamesIfNeeded();
    
    final queryLower = query.toLowerCase();
    final results = <String>[];
    
    _customerNamesMap?.forEach((id, name) {
      if (results.length >= limit) return;
      
      if (name.toLowerCase().contains(queryLower) || 
          id.toLowerCase().contains(queryLower)) {
        results.add('$name ($id)');
      }
    });
    
    print('üîç Auto-complete for "$query" found ${results.length} suggestions');
    return results;
  }

  /// ‡∏î‡∏∂‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dropdown) - ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  Future<Map<String, Customer>> getAllCustomers() async {
    await _loadCustomerMapIfNeeded();
    return _customerMap ?? {};
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  Future<bool> hasCustomerData() async {
    await _loadCustomerMapIfNeeded();
    return _customerMap?.isNotEmpty == true;
  }

  /// ‡∏•‡πâ‡∏≤‡∏á cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î + ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï version tracking
  void clearCache() {
    _customerMap = null;
    _customerNamesMap = null;
    _availableCustomerIds = null;
    _lastLoadTime = null;
    _lastNamesLoadTime = null;
    _lastIdsLoadTime = null;
    _lastFileVersion = null;
    _currentFileVersion = null;
    _lastVersionCheck = null;
    print('üóëÔ∏è All customer caches + version tracking cleared');
  }

  /// ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JSON cache ‡πÉ‡∏ô Firebase (‡∏ó‡∏±‡πâ‡∏á 3 ‡∏£‡∏∞‡∏î‡∏±‡∏ö)
  Future<void> clearRemoteCache() async {
    final List<Future<void>> deleteTasks = [];
    
    // ‡∏•‡∏ö names cache
    deleteTasks.add(_deleteRemoteFile('cache/customer_names.json', 'names'));
    
    // ‡∏•‡∏ö IDs cache
    deleteTasks.add(_deleteRemoteFile('cache/customer_ids.json', 'IDs'));
    
    await Future.wait(deleteTasks);
    print('üóëÔ∏è All remote JSON caches cleared');
  }

  /// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå remote
  Future<void> _deleteRemoteFile(String path, String type) async {
    try {
      final ref = _storage.ref().child(path);
      await ref.delete();
      print('üóëÔ∏è Remote $type cache deleted');
    } catch (e) {
      print('‚ö†Ô∏è Failed to delete remote $type cache: $e');
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå Excel ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Firebase Storage ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  Future<bool> checkExcelFileExists() async {
    try {
      final ref = _storage.ref().child('Customer.xlsx');
      await ref.getDownloadURL();
      return true;
    } catch (e) {
      print('üìÑ Excel file not found: $e');
      return false;
    }
  }

  /// ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase Storage ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á cache ‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin)
  Future<bool> uploadExcelFile(Uint8List fileBytes) async {
    try {
      final ref = _storage.ref().child('Customer.xlsx');
      await ref.putData(
        fileBytes,
        SettableMetadata(
          contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        ),
      );
      
      // ‡∏•‡πâ‡∏≤‡∏á cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      clearCache();
      await clearRemoteCache();
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á cache ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÅ‡∏ö‡∏ö Progressive (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
      print('üîÑ Building progressive cache after upload...');
      await _loadCustomerIdsIfNeeded();    // Level 1: IDs (ultra light)
      await _loadCustomerNamesIfNeeded();  // Level 2: Names (light)
      // Level 3: Full data ‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      
      print('üì§ Excel file uploaded and 3-level progressive cache built');
      return true;
    } catch (e) {
      print('‚ùå Error uploading Excel file: $e');
      return false;
    }
  }

  /// ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Single Load + Smart Update System
  Map<String, dynamic> getCacheStats() {
    return {
      // File Version Tracking
      'fileVersion': _currentFileVersion ?? 'Unknown',
      'lastVersionCheck': _lastVersionCheck?.toIso8601String(),
      'versionCheckAge': _lastVersionCheck != null 
          ? DateTime.now().difference(_lastVersionCheck!).inMinutes 
          : null,
      
      // Level 1: IDs Cache (Ultra Light)
      'hasIdsCache': _availableCustomerIds != null,
      'idsCount': _availableCustomerIds?.length ?? 0,
      'lastIdsLoad': _lastIdsLoadTime?.toIso8601String(),
      'idsCacheAge': _lastIdsLoadTime != null 
          ? DateTime.now().difference(_lastIdsLoadTime!).inMinutes 
          : null,
      'idsCacheExpired': _lastIdsLoadTime != null 
          ? DateTime.now().difference(_lastIdsLoadTime!) > _idsCacheValidDuration
          : true,
      
      // Level 2: Names Cache (Light)
      'hasNamesCache': _customerNamesMap != null,
      'namesCount': _customerNamesMap?.length ?? 0,
      'lastNamesLoad': _lastNamesLoadTime?.toIso8601String(),
      'namesCacheAge': _lastNamesLoadTime != null 
          ? DateTime.now().difference(_lastNamesLoadTime!).inMinutes 
          : null,
      'namesCacheExpired': _lastNamesLoadTime != null 
          ? DateTime.now().difference(_lastNamesLoadTime!) > _namesCacheValidDuration
          : true,
      
      // Level 3: Full Cache (Heavy)
      'hasFullCache': _customerMap != null,
      'fullDataCount': _customerMap?.length ?? 0,
      'lastFullLoad': _lastLoadTime?.toIso8601String(),
      'fullCacheAge': _lastLoadTime != null 
          ? DateTime.now().difference(_lastLoadTime!).inMinutes 
          : null,
      'fullCacheExpired': _lastLoadTime != null 
          ? DateTime.now().difference(_lastLoadTime!) > _cacheValidDuration
          : true,
      
      // Summary
      'cacheLevel': _availableCustomerIds != null ? (_customerNamesMap != null ? (_customerMap != null ? 3 : 2) : 1) : 0,
      'totalMemoryUsed': '${(_availableCustomerIds?.length ?? 0) + (_customerNamesMap?.length ?? 0) + (_customerMap?.length ?? 0)} objects',
    };
  }
}
